실기형

형상관리시스템 : 버전 관리
git : 지옥에서 온 git

git-scm.com

1. 내일 평가(문제해결능력)
    4, 3, 3, 1
2. 백업

-----------------------------------------------------------------------------------------

1. 데이터베이스 백업
백업(mysqldump) <-> 복원(mysql)
저장할 때 확장자 : 20231023_koreait.dump, *.sql

20231023_koreait.tar.gz

*** 백업할 때는 윈도우에서 해야함 mysql에서 하면 X ***

백업
mysqldump -u아이디 -p 디비전체 > 20231023_grp.dump
mysqldump -u아이디 -p 디비 테이블 > 20231023_grp.dump

복원
mysql -uroot -p 디비 < 20231023_grp.dump
mysql -uroot -p 디비 테이블 < 20231023_grp.dump

-----------------------------------------------------------------------------------------

Workbench이용해서 백업 / 복원

Administration -> Data Export / Data Import/Restore

C:\temp\20231023_shopdb.dump

-----------------------------------------------------------------------------------------

DDL
create, drop, alter

create table member(
name varchar(100)
);


use shopdb;

drop table if exists employees;

create table employees(
	emp_id int not null auto_increment,
	emp_name varchar(20),
	emp_salary int,
	primary key(emp_id)
);

INSERT INTO employees VALUES(null, '홍길동', 100);
INSERT INTO employees(emp_id, emp_name, emp_salary) VALUES(null, '이영희', 200);

*** not null은 필수 ***
INSERT INTO employees(emp_id) VALUES(null);

INSERT INTO employees VALUES(null, '부산', 300), (null, '서울', 400), (null, '광주', 500);

SELECT * FROM employees;

SELECT * FROM employees WHERE emp_name IS null;
SELECT * FROM employees WHERE emp_name IS not null;

SELECT * FROM employees WHERE emp_salary >= 300;

SELECT COUNT(*) AS '사원 수' FROM employees  WHERE emp_salary >= 300;

집계함수 : 결과가 하나 => COUNT(), MAX(), MIN(), SUM(), AVG(), DISTINCT()
		          DISTINCT(컬럼명), DISTINCT 컬럼명 : 중복 제거

  + group by + having 조건

SELECT SUM(emp_salary) AS '급여 300이상인 사람의 급여총합' FROM employees  WHERE emp_salary >= 300;

SELECT MAX(emp_salary) AS '급여 300이상중 제일 큰 것' FROM employees  WHERE emp_salary >= 300;
SELECT MIN(emp_salary) AS '급여 300이상중 제일 작은 것' FROM employees  WHERE emp_salary >= 300;

-----------------------------------------------------------------------------------------

번호, 이름, 비번, 성별, 자기소개, 가입일

남, 여
M, F

CREATE TABLE member(
	mem_id int not null auto_increment,
	mem_name varchar(10) not null,
	mem_pwd varchar(20) not null,
	mem_gender char(1) not null,
	mem_intro text,
	mem_regdate date,
	primary key(mem_id)
);

INSERT INTO member VALUES(null, '홍길동', '1234', 'M', '자기소개1', now());
INSERT INTO member VALUES(null, '홍길동', '5678', 'M', '자기소개2', sysdate());
INSERT INTO member VALUES(null, '이영희', '0000', 'F', '자기소개3', curdate());

INSERT INTO member VALUES(null, '김부산', '8888', 'M', '자기소개4', '2023-01-01');

SELECT * FROM member;

중복제거
SELECT DISTINCT mem_name FROM member;
SELECT DISTINCT (mem_name) FROM member;

INSERT INTO member VALUES(null, '김부산', '8888', 'M', '자기소개4', now() + 1);

*** 2023년 01월 01일 ~ 2023년 12월 31일에 입사한 사원의 이름과 날짜를 출력하시오.
SELECT mem_name, mem_regdate FROM member WHERE mem_regdate >= '2023-01-01' AND mem_regdate <= '2023-12-31';

*** 2023년 01월 01일 ~ 2023년 12월 31일에 입사한 사원의 수를 출력하시오.
SELECT COUNT(*) AS '2023-01-01 ~ 2023-12-31 입사한 사원 수' FROM member WHERE mem_regdate >= '2023-01-01' AND mem_regdate <= '2023-12-31';

*** 성별이 남자인 사람의 아이디와 성별을 출력하시오.
SELECT mem_id, mem_gender FROM member WHERE mem_gender = 'M';

*** 성별이 남자인 사람의 수를 출력하되 컬럼명은 회원(남자)로 출력하시오.
SELECT COUNT(*) AS '회원(남자)' FROM member WHERE mem_gender = 'M';


 = 홍길동	       %코리아아이티%~
일치 조건 <-> 유사 검색

*** 입사일이 2023년 01월 01일 ~ 2023년 12월 31일인 사람의 수를 출력하시오.
SELECT COUNT(*) FROM member WHERE mem_regdate >= '2023-01-01' AND mem_regdate <= '2023-12-31';

*** 입사일이 2023년 01월 01일 ~ 2023년 12월 31일인 사람의 수를 출력하시오.(속도 더 빠름)
     컬럼명 Between A and B;
SELECT COUNT(*) FROM member WHERE mem_regdate Between '2023-01-01' AND '2023-12-31';

-----------------------------------------------------------------------------------------

AND 연산 : 이고, 이면서 - 조건을 모두 만족
OR 연산 : 이거나, 또는 - 조건 중 하나만 만족

AND 연산
- 성별이 여자인 사람의 이름과 성별을 출력하시오.
SELECT mem_name, mem_gender FROM member WHERE mem_gender = 'F';

OR 연산
- 성별이 남자이거나 여자인 사람의 이름과 성별을 출력하시오.
SELECT mem_name, mem_gender FROM member WHERE mem_gender = 'M' OR mem_gender = 'F';

OR연산 : 컬럼명 IN(값1, 값2, 값3)
성별이 남자이거나 여자인 사람의 이름과 성별을 출력하시오.
SELECT mem_name, mem_gender FROM member WHERE mem_gender IN ('M', 'F');

-----------------------------------------------------------------------------------------

유사어 검색 : _, %
_ : 글자 한 글자
% : 글자 수 제한X

- 컬럼명 LIKE '%검색어%';

- 컬럼명 LIKE '%검색어';
- 컬럼명 LIKE '검색어%';

mem_name, mem_intro
*** 이름이 홍으로 시작하는 사람의 모든 정보를 출력하시오.
SELECT * FROM member WHERE mem_name LIKE '%홍%';

*** 이름이 홍으로 시작하는 사람의 수를 출력하시오.
SELECT COUNT(*) AS '홍으로 검색된 회원 수' FROM member WHERE mem_name LIKE '%홍%';


mem_intro 컬럼에 자기소개가 포함되어 있는 회원의 회원번호와 이름, 성별을 출력하시오.
SELECT mem_id, mem_name, mem_gender FROM member WHERE mem_intro LIKE '%자기소개%';

mem_intro 컬럼에 자기소개가 포함되어 있는 회원의 회원번호와 이름, 성별을 출력하시오.(단, 이름의 오름차순 / 내림차순으로 정렬하시오.)
SELECT mem_id, mem_name, mem_gender FROM member WHERE mem_intro LIKE '%자기소개%' ORDER BY mem_name ASC;  -> 오름차순
SELECT mem_id, mem_name, mem_gender FROM member WHERE mem_intro LIKE '%자기소개%' ORDER BY mem_name DESC;  -> 내림차순

mem_intro 컬럼에 자기소개가 포함되어 있는 회원 정보 전부를 출력하시오.(단, 이름의 내림차순으로 출력하되 최근 2개만 출력되도록 하시오. LIMIT2)
 - 조건 + 정렬 + (LIMIT)
SELECT * FROM member WHERE mem_intro LIKE '%자기소개%' ORDER BY mem_name DESC LIMIT 2;
