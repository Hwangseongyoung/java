mysql.com => Mariadb
Oracle
Mssql

JDBC

JDK <- Mysql Connector -> Mysql
       미들웨어(middleware)<*.jar -> zip X>


DDL : CREATE, DROP
DCL : INSERT, SELECT, UPDATE, DELETE

***Mysql다운로드***
mysql.com -> Download -> MySQL Community (GPL) Downloads -> MySQL Community Server -> 8.0.34 ->
 Go to Download Page -> 용량큰거 다운 -> No thanks, just start my download. -> 설치 -> Server only -> Execute -> Microsoft Visual C++설치 ->
 Port(3306) -> password(쉬운거 아무거나 해도됨) -> Execute쭉쭉

---환경변수 설정---
고급시스템설정 -> 환경변수 -> path -> C:\Program Files\MySQL\MySQL Server 8.0\bin추가 -> cmd(mysql -uroot -p) -> 나갈때는(exit)

***middlewae(*jar -> zip X) 다운로드***
Connector/J -> Archives ->Operating System(Platform Independent) -> 용량큰거 다운 -> 압축풀기

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

서버 : 최고관리자(root) -> 일반계정에 권한 부여

SQL : 구조적 질의어 - Structured Query Language
- ANSI SQL : 모든 데이터베이스에서 공통으로 사용 가능

데이터베이스(큰 폴더) -> 테이블(작은 폴더 : 여러 개 존재 - 실제 데이터가 저장)

큰 폴더 확인
SHOW DATABASES;

작은 폴더
USE 데이터베이스이름;
SHOW TABLES;

데이터베이스명은 대문자를 넣어도 소문자로 인식

쇼핑몰(데이터베이스 - 큰 폴더) - SHOP
use SHOP;

8 ~ 15
타입을 정확하게 명시했는지 확인 => DESC 테이블명;
- 회원가입 : 객체(아이디, 이름, 나이...) - SHOP_MEMBER 테이블
CREATE TABLE SHOP_MEMBER(
userid varchar(15),
name varchar(10),
tel char(15),
jumin char(14),
age int,
data date
);
- 상품등록 : 객체(상품이름, 가격...) - SHOP_ITEMS 테이블
숫자는 INT, 글자는 VARCHAR(저장할 글자수)


데이터베이스 K_ERP

전사적자원관리(ERP) -데이터베이스
use 데이터베이스명;

- 사원관리 : Employees 테이블 : K_ERP_EMP 테이블
사번(int), 사원명(varchar(20)), 급여(int), 입사일(datetime / date)

CREATE TABLE K_ERP_EMP(
id int,
name varchar(20),
salary int,
startDate date
);

***백업***
exit -> 백업경로들어가서 -> mysqldump -uroot -p 백업할 데이터베이스명 > 백업이름.확장자

mysqldump -uroot -p K_ERP > ./20231004_erp.dump
mysqldump -uroot -p K_ERP > ./20231004_erp.sql

mysql -uroot -p K_ERP < ./20231004_erp.dump    ---> 백업파일 불러오기

- 급여관리 : Salary 테이블 : K_ERP_SALARY 테이블
- 자재관리 : Stuff 테이블 : K_ERP_STUFF

★데이터베이스 정의어(D Definition L)
- 생성(CREATE), 제거(DROP), 변경(ALTER)
		↓
use 데이터베이스명;(큰 폴더 안으로 들어가기)
		↓
★데이터베이스 조작어(D Manupulate L)
- 입력(INSERT), 검색(SELECT), 수정(UPDATE), 삭제(DELETE)

데이터베이스 제어어(D Control L) : 보안 - 계정생성

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

i/o
jdk <=> mysql
jdbcPrj01
- JDBCPrj01Ex.java

SHOW DATABASES;

CREATE DATABASE SHOP;

SHOW DATABASES;

https://www.naver.com/
ftp://www.naver.com/
dns://www.naver.com/
ssh://www.naver.com/

jdbc:mysql://localhost:3306/shop

내 컴퓨터
- 이름 or IP
localhost or 127.0.0.1
koreait.co.kr:3306

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

쇼핑몰
- 회원가입 테이블
 - 회원번호 : INT,
 - 회원이름 : VARCHAR, 
 - 전화번호 : CHAR(13),
 - 포인트 : INT
 - 가입일

CREATE TABLE MEMBER(
id int,
name varchar(20),
tel char(13),
point int,
regdate date
);

INSERT INTO 테이블명 VALUES(값1, 값2...);

INSERT INTO MEMBER VALUES(101, '홍길동', '010-1234-5678', 1000, NOW());

SELECT * FROM MEMBER;


DDL : CREATE, DROP, ALTER

DML
테이블 생성 후

INSERT
SELECT
UPDATE
DELETE

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

제약조건

쇼핑몰(SHOP)
- 회원가입
  - 이메일
  - 비밀번호
  - 이름
  - 주소

쇼핑몰(SHOP)
1. MYSQL 접속
2. SHOW DATABASES;

3-1. 만들어진 데이터베이스가 없다면
      CREATE DATABASE 이름;
      USE 데이터베이스명;

3-2. 미리 생성된 데이터베이스가 있으면
      USE 데이터베이스명;

4. 테이블 이름 확인

5. 테이블 생성 -> 자바에서 필드명과 동일하게 작업
   필드명을 만들 때
   디비는 _로 단어를 연결하고
   자바는 카멜표기법으로 연결
   - 제약 조건을 지정해야 한다.
      - NOT NULL : 절대 값이 비면 안되는 필드

CREATE TABLE MEMBER(
email varchar(50) NOT NULL,
passwd varchar(15) NOT NULL,
name varchar(10) NOT NULL,
post char(5),
addr1 varchar(100),
addr2 varchar(50)
);

SHOW TABLES;
DESC 테이블명; -- 테이블 구조 확인

5-2. 테이블이 존재한다면
      SHOW TABLES;
      DESC 테이블명; -- 테이블 구조 확인

6. CRUD 작업

primary key : 빈값도X, 중복된 값도X
-> 유일한 나를 구분해 준다(수정 , 삭제, 검색 내 것만 처리가 가능)

unique : 빈값 허용하지만 중복된 값은 허용X

INSERT INTO MEMBER VALUES('mail@mail,com', '1234', '홍길동', '50001', '부산진구', '빌딩4층');

기본키는 빈 값X + 중복된 값X
CREATE TABLE MEMBER(
email varchar(50) NOT NULL primary key,
passwd varchar(15) NOT NULL
);

INSERT INTO MEMBER VALUES('mail@mail,com', '1234'), ('mail2@mail,com', '1234'), ('mail3@mail,com', '1234');

SELECT * FROM MEMBER; -- 출력

SELECT COUNT(*) AS 회원수 FROM MEMBER; ---> 사원 수 출력할때


CREATE TABLE MEMBER(
id int not null primary key,
name varchar(50),
passwd varchar(10)
);

INSERT INTO MEMBER VALUES(101, '홍길동', '1111'), (102, '김철수', '2222'), (103, '이영희', '3333');

SELECT * FROM MEMBER; -- 출력

DELETE FROM MEMBER; -- 전체 삭제

DELETE FROM MEMBER WHERE id = 101;

SELECT * FROM MEMBER;

CREATE TABLE MEMBER(
id int not null auto_increment,
name varchar(10) not null,
passwd varchar(20) not null,
primary key(id)
);

INSERT INTO MEMBER VALUES(NULL, '홍길동', '1234');
INSERT INTO MEMBER VALUES(NULL, '홍길동', '1234');
INSERT INTO MEMBER VALUES(NULL, '홍길동', '1234');

DELETE FROM member WHERE id = 3;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

UPDATE 테이블명 SET
바꿀 컬럼명1 = 값, 바꿀 컬럼명2 = 값
WHERE 조건 = 값;

컬럼명 = 필드

이름, 비번, 2번
UPDATE MEMBER SET
name = '코리아', passwd = '1111'
WHERE id = 2;

SELECT * FROM MEMBER;

SELECT * FROM 테이블명 WHERE 조건 = 값;  --> 원하는 조건의 값만 출력

☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
***입력***
INSERT INTO 테이블명 VALUES(값1, 값2...);

***삭제***
DELETE FROM 테이블명 WHERE pk컬럼 = 값;

***수정***
UPDATE 테이블명 SET 수정할 컬럼1 = 값, 수정할 컬럼2 = 값... WHERE pk컬럼 = 값;

***전체 검색***
SELECT * FROM 테이블명;

***조건 검색***
SELECT * FROM 테이블명 WHERE pk컬럼 = 값;
☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

회원번호, 회원이름, 비밀번호를 데이터베이스에 저장하는 jdbc 프로그램을 완성하시오.
jdbcPrj02 => JDBCPrj02Ex.java
insert.txt

0. 데이터베이스/테이블 생성 : mydb/register
1. 드라이버 등록
2. Class.forName()
3. url, id, pwd
4. INSERT

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1 - 9, ㄱ - ㅎ, a ~ z : ASC : 오름차순
9 - 1, ㅎ - ㄱ, z ~ a : DESC : 내림차순

ORDER BY id ASC : id를 기준으로 오름차순
ORDER BY id DESC : id를 기준으로 내림차순

SELECT * FROM register ORDER BY id DESC;

SELECT * FROM register ORDER BY name ASC;

홍길동, 서울
홍길동, 부산

SELECT * FROM register ORDER BY name DESC, region ASC;