
join + erd

- 쇼핑몰 shopdb

- 회원가입 users
create table users(
	userid varchar(20) not null,
	name varchar(10) not null,
	primary key(userid)
);


- 카트 cart
create table cart(
	pro_num varchar(20) not null,
	pro_name varchar(100),
	pro_price int,
	cart_id int not null auto_increment,
	userid_fk varchar(20) not null,
	primary key(cart_id),
	foreign key(userid_fk) references users(userid)
);

- 상품구매 buy
create table buy(
	buy_id int not null auto_increment,
	pro_num varchar(20) not null,
	pro_name varchar(100),
	pro_price int,
	pro_count int,
	pro_delivery char(1),
	userid_fk varchar(20) not null,
	primary key(buy_id),
	foreign key(userid_fk) references users(userid)
);


- 카테고리 category
create table category(
	cate_name varchar(20) not null,
	primary key(cate_name)
);


- 상품등록 product
create table product(
	pro_num varchar(20) not null,
	pro_name varchar(100),
	pro_price int,
	pro_count int,
	cate_name_fk varchar(20) not null,
	primary key(pro_num),
	foreign key(cate_name_fk) references category(cate_name) ON UPDATE cascade ON DELETE restrict
);

-----------------------------------------------------------------------------------------------------------------------

외래키 무결성 제약조건
update : 대분류를 변경하게 된다면.. 상품을...
ON UPDATE cascade

delete : 대분류를 삭제하게 된다면.. 상품을...
ON DELETE restrict


- 카테고리에 추가
INSERT INTO category VALUES('컴퓨터');
INSERT INTO category VALUES('노트북');
INSERT INTO category VALUES('스마트폰');

- 상품등록에 추가
INSERT INTO product VALUES('101', 'LG 컴퓨터', 1, 1, '컴퓨터');   --->  cate_name과 cate_name_fk와 동일해야 등록됨
INSERT INTO product VALUES('102', '갤럭시 21', 2, 2, '스마트폰');

- 카테고리 pk값 삭제 / 변경 시
DELETE FROM category WHERE cate_name = '컴퓨터';   ---->  ON DELETE restrict를 사용하였기 때문에 삭제되지 않는다.

UPDATE category SET cate_name = '컴퓨터2' WHERE cate_name = '컴퓨터';
SELECT * FROM category;
SELECT * FROM product;           ----->   ON UPDATE cascade를 통해 부모가 변경되면 자식도 변경된다.


- 연결 t1, t2 연결해서 = 1
** category, product를 연결해서 (category)대분류, 상품번호, 상품명, 구매개수, 가격 순으로 출력
(단, 대분류가 같은 것만 출력하시오)

SELECT 
category.cate_name, 
product.pro_num, 
pro_name, 
product.pro_count, 
product.pro_price 
FROM category, product;

SELECT 
C.cate_name, 
P.pro_num, 
P.pro_name, 
P.pro_count, 
P.pro_price 
FROM category C, product P;    ----->  각 테이블의 별명을 정하여 사용하여 코드를 줄일 수 있다.


SELECT 
C.cate_name, 
P.pro_num, 
P.pro_name, 
P.pro_count, 
P.pro_price 
FROM category C, product P
WHERE C.cate_name = P.cate_name_fk;

-----------------------------------------------------------------------------------------------------------------------

join

- inner join(내부join)

  - 테이블이 2개일 때
SELECT 출력컬럼 FROM t1, t2 WHERE t1.컬럼 = t2.컬럼;
			=
SELECT 출력컬럼 FROM t1 INNER JOIN t2 ON t1.컬럼 = t2.컬럼;

** 분류 테이블 컬럼 전부, 상품 테이블 컬럼 전부를 출력하시오.
SELECT C.*, P.* FROM category C INNER JOIN product P ON C.cate_name = P.cate_name_fk;

** 분류 테이블의 분류 컬럼과 상품 테이블의 상품번호, 상품이름만 출력하시오.
(t1 INNER JOIN t2 ON 조건)

SELECT A.cate_name, B.pro_num, B.pro_name FROM category A INNER JOIN product B ON A.cate_name = B.cate_name_fk;



  - 테이블이 3개일 때(다음 시간에 자세히)
SELECT 출력컬럼 FROM t1 INNER JOIN t2 ON t1.컬럼 = t2.컬럼
INNER JOIN t3 ON t2.컬럼 = t3.컬럼;

-----------------------------------------------------------------------------------------------------------------------

- users에 데이터 입력
INSERT INTO users VALUES('koreait', '홍길동');

- cart에 데이터 입력
INSERT INTO cart VALUES('101', 'LG IBM Computer', 10, null, 'koreait');      --->   userid(pk)와 userid_fk(fk)가 동일해야 저장
INSERT INTO cart VALUES('102', 'Apple Iphone', 15, null, 'koreait');


** 아이디, 이름, 상품명, 가격을 표시하시오.
(t1 INNER JOIN t2 ON 조건)

SELECT * FROM users U INNER JOIN cart C ON U.userid = C.userid_fk;

** 유저 테이블의 아이디, 이름과 카트 테이블의 상품이름, 상품가격만 출력하시오.
SELECT U.userid, U.name, C.pro_name, C.pro_price FROM users U INNER JOIN cart C ON U.userid = C.userid_fk;

-----------------------------------------------------------------------------------------------------------------------

다중 게시판

- config(게시판 설정)
create table config(
	code varchar(20) not null,
	title varchar(100) not null,
	color varchar(20) not null,
	primary key(code)
);
-> code : 디비 테이블 이름 => notice 공지사항 -> create table notice();


- board(게시판)
create table notice_board(
	b_id int not null auto_increment,
	subject varchar(100) not null,
	name varchar(10),
	content text,
	regdate date,
	code_fk varchar(20) not null,
	primary key(b_id),
	foreign key(code_fk) references config(code) ON UPDATE CASCADE ON DELETE RESTRICT
);
